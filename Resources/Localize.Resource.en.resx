<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name=".NetCoreDesc" xml:space="preserve">
    <value>I've used this to build APIs, Backend services and Frontend solutions.</value>
  </data>
  <data name="About" xml:space="preserve">
    <value>I'm a software engineer specializing in web development.&lt;br/&gt;&lt;br/&gt;

In my job, what fulfills me is tackling coding problems, exploring new technologies, and feeling like I'm contributing to the team. I love working in environments that foster continuous learning and growth. As for my job preferences, I am drawn to backend services and am eager to delve deeper into system designs.&lt;br /&gt;&lt;br/&gt;

In my spare time, I'm passionate about exercise, whether it's hitting the gym or running. And if it is a sunny Sunday, you'll likely find me out riding my motorcycle.</value>
  </data>
  <data name="AngularDesc" xml:space="preserve">
    <value>My experience is mainly in Angular2 and I have dabbled in AngularJS as well. Some libraries/tools I have used are Angular Material and Bootstrap.</value>
  </data>
  <data name="Army" xml:space="preserve">
    <value>Greek Army</value>
  </data>
  <data name="ArmyDate" xml:space="preserve">
    <value>Mar - Oct 2023</value>
  </data>
  <data name="ArmyDepartment" xml:space="preserve">
    <value>Greek Armed Forces IT Corps</value>
  </data>
  <data name="ArmyDesc" xml:space="preserve">
    <value>· Held a part-time position as a software engineer during mandatory military service.&lt;br /&gt;
· Developed and maintained the military's internal software systems.&lt;br /&gt;
· Provided technical support to system users, addressing inquiries and troubleshooting issues.</value>
  </data>
  <data name="BlazorDesc" xml:space="preserve">
    <value>Helped me to build responsive modern web applications. I have used Syncfusion and Mudblazor libraries to leverage blazor features with ease.</value>
  </data>
  <data name="BuildBy" xml:space="preserve">
    <value>Build by George Papasteriadis</value>
  </data>
  <data name="Contact" xml:space="preserve">
    <value>Contact</value>
  </data>
  <data name="ContactTitle" xml:space="preserve">
    <value>&lt;b&gt;Reach Out😉&lt;/b&gt;</value>
  </data>
  <data name="CothetaDate" xml:space="preserve">
    <value>Jul - Oct 2019</value>
  </data>
  <data name="CothetaDesc" xml:space="preserve">
    <value>· Engaged in virtual and augmented reality projects using Unity3D.&lt;br /&gt;
· Contributed to the creation of interactive experiences.</value>
  </data>
  <data name="CV" xml:space="preserve">
    <value>Resume:</value>
  </data>
  <data name="DockerDesc" xml:space="preserve">
    <value>Docker has enabled me to seamlessly package and deploy applications with ease. Α few examples of some of the types of applications I have Dockerized are: .ΝΕΤ6 Services, NestJS App, Databases, Message Brokers, FrontEnd Solutions.</value>
  </data>
  <data name="EFCoreDesc" xml:space="preserve">
    <value>I gained my exprerience in EF Core primarily through structured courses, complemented by practical exposure to both the older Entity Framework and the latest EF Core in professional settings.</value>
  </data>
  <data name="EnglishCulture" xml:space="preserve">
    <value>EN</value>
  </data>
  <data name="ExperienceTitle" xml:space="preserve">
    <value>&lt;b&gt;Where I’ve Worked&lt;/b&gt;</value>
  </data>
  <data name="Exprerience" xml:space="preserve">
    <value>Exprerience</value>
  </data>
  <data name="FindMe" xml:space="preserve">
    <value>You can also find me on the following social networks</value>
  </data>
  <data name="GreekCulture" xml:space="preserve">
    <value>ΕΛ</value>
  </data>
  <data name="MobileApp" xml:space="preserve">
    <value>FoodWaste App</value>
  </data>
  <data name="MobileAppDesc" xml:space="preserve">
    <value>As a freelancer, I undertook a one-month project to develop a mobile application. FoodWaste application enables users to effortlessly input and categorize leftover food items, providing insightful analytics to help them understand their consumption habits better.&lt;br&gt;&lt;br&gt;

&lt;b&gt;Implementation Details:&lt;/b&gt;&lt;br&gt;
· Leveraging the Ionic Framework integrated with Angular, I crafted dynamic user interfaces for seamless experiences across both Android and iOS platforms.&lt;br /&gt;
· In the backend, I employed Apollo GraphQL and nestJS to build a robust system. MongoDB was utilized for efficient data storage and retrieval.&lt;br /&gt;
· Deployment was done on DigitalOcean using Docker containers. This approach allowed for agile packaging and deployment.</value>
  </data>
  <data name="MobileAppHoverText1" xml:space="preserve">
    <value>Click to see sample images</value>
  </data>
  <data name="MobileAppHoverText2" xml:space="preserve">
    <value>Flip back</value>
  </data>
  <data name="MobileAppTitle1" xml:space="preserve">
    <value>&lt;u&gt;Android/iOS FoodWaste App&lt;/u&gt;</value>
  </data>
  <data name="MobileAppTitle2" xml:space="preserve">
    <value>&lt;u&gt;Android/iOS FoodWaste App - Sample Images/Video&lt;/u&gt;</value>
  </data>
  <data name="MongoDBDesc" xml:space="preserve">
    <value>My experience with mongoDB is based on a job I had as a freelancer. I was using it with Mongoose (ODM) and mongo-express (Admin Interface).</value>
  </data>
  <data name="MyName" xml:space="preserve">
    <value>&lt;b&gt;George Papasteriadis&lt;/b&gt;</value>
  </data>
  <data name="PersonalWebsite" xml:space="preserve">
    <value>Personal Website</value>
  </data>
  <data name="PersonalWebsiteDesc" xml:space="preserve">
    <value>This project serves as a portfolio to showcase my projects, skills, and experiences in web development.&lt;br&gt;&lt;br&gt;

&lt;b&gt;Implementation Details:&lt;/b&gt;&lt;br&gt;
·Built using Blazor with .NET 8 and the MudBlazor library. A dynamic
client-side web application that adapts effortlessly to any screen, whether you're browsing on a desktop, tablet, or smartphone.&lt;br&gt;

·Hosted on Microsoft Azure using the Static Web Apps service.&lt;br&gt;

·The codebase stored on GitHub, leveraging GitHub Actions for Continuous Integration and Continuous Development (CI/CD), which helps updates and enhancements roll out seamlessly.</value>
  </data>
  <data name="PersonalWebsiteTitle" xml:space="preserve">
    <value>&lt;u&gt;My First Personal Website&lt;/u&gt;</value>
  </data>
  <data name="Projects" xml:space="preserve">
    <value>Projects</value>
  </data>
  <data name="ProjectsTitle" xml:space="preserve">
    <value>&lt;b&gt;Some projects&lt;/b&gt;</value>
  </data>
  <data name="RabbitMQDesc" xml:space="preserve">
    <value>Leveraging the library in C#, I successfully implemented it for various scenarios including asynchronous email dispatch, push notifications, and job scheduling, thereby enhancing system responsiveness and scalability.</value>
  </data>
  <data name="Salutation" xml:space="preserve">
    <value>Hello!👋 my name is</value>
  </data>
  <data name="SendMeMail" xml:space="preserve">
    <value>Send Me Email</value>
  </data>
  <data name="ServiceBooking" xml:space="preserve">
    <value>Service Booking</value>
  </data>
  <data name="ServiceBookingDesc" xml:space="preserve">
    <value>The Local Service Booking Platform is a personal side project aimed at providing users with a convenient and efficient way to access local services in their area. I am building this platform to connect users with trusted service providers for a variety of needs, including home cleaning, pet grooming, tutoring, and more.&lt;br&gt;&lt;br&gt;

&lt;b&gt;Implementation Details:&lt;/b&gt;&lt;br&gt;
· &lt;br&gt;
· &lt;br&gt;
· &lt;br&gt;</value>
  </data>
  <data name="ServiceBookingTitle" xml:space="preserve">
    <value>&lt;u&gt;Local Service Booking Web App&lt;/u&gt;</value>
  </data>
  <data name="SignalRDesc" xml:space="preserve">
    <value>In a previous role, I leveraged SignalR to facilitate real-time updates within the frontend, implementing solutions in both C# and JavaScript.</value>
  </data>
  <data name="SkillAcquired" xml:space="preserve">
    <value>Was acquired through:</value>
  </data>
  <data name="SkillAcquired_Job" xml:space="preserve">
    <value>Job</value>
  </data>
  <data name="SkillAcquired_JobCourse" xml:space="preserve">
    <value>Job, Courses</value>
  </data>
  <data name="SkillAcquired_JobProject" xml:space="preserve">
    <value>Job, Projects</value>
  </data>
  <data name="SkillAcquired_JobProjectCourse" xml:space="preserve">
    <value>Job, Projects, Courses</value>
  </data>
  <data name="SkillAcquired_Project" xml:space="preserve">
    <value>Projects</value>
  </data>
  <data name="Skills" xml:space="preserve">
    <value>Skills</value>
  </data>
  <data name="SkillsTitle" xml:space="preserve">
    <value>&lt;b&gt;Skills/Tools acquired&lt;/b&gt;</value>
  </data>
  <data name="SoftwareEngineer" xml:space="preserve">
    <value>&lt;b&gt;Software Engineer&lt;/b&gt;</value>
  </data>
  <data name="SoftwareEngineerIntern" xml:space="preserve">
    <value>&lt;b&gt;Software Engineer Intern &lt;/b&gt;</value>
  </data>
  <data name="SQLDesc" xml:space="preserve">
    <value>In almost every project I've taken on, I've used SQL by integrating it with various ORMs like EFCore and Sequelize. Additionally, I have used raw SQL queries extensively.</value>
  </data>
  <data name="TerracomDate" xml:space="preserve">
    <value>Oct 2020 - Dec 2022</value>
  </data>
  <data name="TerracomDesc" xml:space="preserve">
    <value>·Played a pivotal role in the development, maintenance, and evolution of the patrol and security management platform QR-Patrol.&lt;br /&gt;
·Actively participated in technical analysis and system design processes, contributing to enhance project outcomes.&lt;br /&gt;
·Engaged in team meetings to synchronize efforts and maintain alignment with project goals, while maintaining close collaboration with team members to implement updates and improvements.</value>
  </data>
  <data name="UnderConstruction" xml:space="preserve">
    <value>&lt;b&gt;  Under Construction &lt;/b&gt;</value>
  </data>
</root>