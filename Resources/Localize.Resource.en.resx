<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name=".NetCoreDesc" xml:space="preserve">
    <value>I've used this to build APIs, Backend services and Frontend solutions.</value>
  </data>
  <data name="About" xml:space="preserve">
    <value>I'm a software engineer specializing in web development.&lt;br/&gt;&lt;br/&gt;

In my work, what fills me up is finding solutions to problems, exploring new technologies and feeling like I'm contributing to the team. I seek to work in environments that promote continuous learning and growth. As for my preferences, I'm more interested in backend technologies and want to delve quite deep into system design.&lt;br /&gt;&lt;br/&gt;

In my spare time, I enjoy working out and going on motorcycle trips, they give me energy and help me escape from the daily routine.</value>
  </data>
  <data name="AngularDesc" xml:space="preserve">
    <value>My experience is mainly in Angular2 and I have dabbled in AngularJS as well. Some libraries/tools I have used are Angular Material and Bootstrap.</value>
  </data>
  <data name="Army" xml:space="preserve">
    <value>Greek Army</value>
  </data>
  <data name="ArmyDate" xml:space="preserve">
    <value>Mar - Oct 2023</value>
  </data>
  <data name="PwCDate" xml:space="preserve">
    <value>May 2024 - Present</value>
  </data>
  <data name="ArmyDepartment" xml:space="preserve">
    <value>Greek Armed Forces IT Corps</value>
  </data>
  <data name="ArmyDesc" xml:space="preserve">
    <value>During Mandatory Military Service:&lt;br/&gt;
• Developed and maintained internal software systems to support operational needs.&lt;br/&gt;
• Provided technical support to end users, resolving inquiries and troubleshooting issues.&lt;br/&gt;
• Contributed to ongoing improvements and enhancements of critical applications.</value>
  </data>
  <data name="Back" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="BlazorDesc" xml:space="preserve">
    <value>Helped me to build responsive modern web applications. I have used Syncfusion and Mudblazor libraries to leverage blazor features with ease.</value>
  </data>
  <data name="BuildBy" xml:space="preserve">
    <value>Built and designed by &lt;br&gt; George Papasteriadis</value>
  </data>
  <data name="Contact" xml:space="preserve">
    <value>Contact</value>
  </data>
  <data name="Contact1" xml:space="preserve">
    <value>Contact</value>
  </data>
  <data name="ContactTitle" xml:space="preserve">
    <value>&lt;b&gt;Reach Out😉&lt;/b&gt;</value>
  </data>
  <data name="CothetaDate" xml:space="preserve">
    <value>Jul - Oct 2019</value>
  </data>
  <data name="CothetaDesc" xml:space="preserve">
    <value>• Developed VR/AR projects with Unity3D, creating interactive experiences.</value>
  </data>
  <data name="CV" xml:space="preserve">
    <value>Resume:</value>
  </data>
  <data name="DockerDesc" xml:space="preserve">
    <value>Docker has enabled me to seamlessly package and deploy applications with ease. Α few examples of some of the types of applications I have Dockerized are: .ΝΕΤ6 Services, NestJS App, Databases, Message Brokers, Frontend Solutions.</value>
  </data>
  <data name="EFCoreDesc" xml:space="preserve">
    <value>I gained experience in EF Core mainly through online courses but also through applying it in a work environment.</value>
  </data>
  <data name="EnglishCulture" xml:space="preserve">
    <value>EN</value>
  </data>
  <data name="Experience" xml:space="preserve">
    <value>Experience</value>
  </data>
  <data name="ExperienceTitle" xml:space="preserve">
    <value>&lt;b&gt;Where I’ve Worked&lt;/b&gt;</value>
  </data>
  <data name="FindMe" xml:space="preserve">
    <value>You can also find me on the following social networks</value>
  </data>
  <data name="GreekCulture" xml:space="preserve">
    <value>ΕΛ</value>
  </data>
  <data name="MobileApp" xml:space="preserve">
    <value>FoodWaste App</value>
  </data>
  <data name="MobileAppDesc" xml:space="preserve">
    <value>As a freelancer, I undertook a one-month project to develop a mobile application. FoodWaste application enables users to effortlessly input and categorize leftover food items, providing useful analytics to help them understand their consumption habits better.&lt;br&gt;&lt;br&gt;

&lt;b&gt;Implementation Details:&lt;/b&gt;&lt;br&gt;
· Leveraging the Ionic Framework integrated with Angular, I crafted dynamic user interfaces for seamless experiences across both Android and iOS platforms.&lt;br /&gt;
· In the backend, I employed Apollo GraphQL and nestJS to build a robust system. MongoDB was utilized for data storage and retrieval.&lt;br /&gt;
· Deployment was done on DigitalOcean using Docker containers. This approach allowed for agile packaging and deployment.</value>
  </data>
  <data name="MobileAppShowSample" xml:space="preserve">
    <value>Click to see a sample</value>
  </data>
  <data name="MobileAppTitle1" xml:space="preserve">
    <value>&lt;u&gt;Android/iOS FoodWaste App&lt;/u&gt;</value>
  </data>
  <data name="MobileAppTitle2" xml:space="preserve">
    <value>&lt;u&gt;Android/iOS FoodWaste App - Sample Images/Video&lt;/u&gt;</value>
  </data>
  <data name="MongoDBDesc" xml:space="preserve">
    <value>My experience with mongoDB is based on a job I had as a freelancer. I was using it with Mongoose (ODM) and mongo-express (Admin Interface).</value>
  </data>
  <data name="MyName" xml:space="preserve">
    <value>&lt;b&gt;George Papasteriadis&lt;/b&gt;</value>
  </data>
  <data name="PersonalWebsite" xml:space="preserve">
    <value>Personal Website</value>
  </data>
  <data name="PersonalWebsiteDesc" xml:space="preserve">
    <value>This project serves as a portfolio to showcase my projects, skills, and work experience in web development.&lt;br&gt;&lt;br&gt;

&lt;b&gt;Implementation Details:&lt;/b&gt;&lt;br&gt;
·Built using Blazor with .NET 8 and the MudBlazor library. A dynamic
client-side web application that adapts effortlessly to any screen, whether you're browsing on a desktop, tablet, or smartphone.&lt;br&gt;

·Hosted on Microsoft Azure using the Static Web Apps service.&lt;br&gt;

·The codebase stored on GitHub, leveraging GitHub Actions for Continuous Integration and Continuous Development (CI/CD), which helps updates and enhancements roll out seamlessly.</value>
  </data>
  <data name="PersonalWebsiteTitle" xml:space="preserve">
    <value>&lt;u&gt;My First Personal Website&lt;/u&gt;</value>
  </data>
  <data name="Phase" xml:space="preserve">
    <value>Phase</value>
  </data>
  <data name="Projects" xml:space="preserve">
    <value>Projects</value>
  </data>
  <data name="ProjectsTitle" xml:space="preserve">
    <value>&lt;b&gt;Some projects&lt;/b&gt;</value>
  </data>
  <data name="RabbitMQDesc" xml:space="preserve">
    <value>Leveraging the library in C#, I successfully implemented it for various scenarios including asynchronous email dispatch, push notifications, and job scheduling, thereby enhancing system responsiveness and scalability.</value>
  </data>
  <data name="Salutation" xml:space="preserve">
    <value>Hello!👋 my name is</value>
  </data>
  <data name="SendMeMail" xml:space="preserve">
    <value>Send Me Email</value>
  </data>
  <data name="ServiceBooking" xml:space="preserve">
    <value>Service Booking</value>
  </data>
  <data name="ServiceBookingDesc" xml:space="preserve">
    <value>The Local Services Booking Platform is a personal side project that aims to provide users with a convenient and efficient way to access local services in their area. I am building this platform to connect users with reliable service providers for various needs like house cleaning, personal training, tutoring and more.&lt;br&gt;&lt;br&gt;

&lt;b&gt;Implementation details:&lt;/b&gt;&lt;br&gt;
· &lt;em&gt;Frontend Development:&lt;/em&gt;&lt;br&gt;
For the Frontend, I will be using Blazor in .NET 8, enhancing it with the MudBlazor library. Also, I will use ASP.NET Core Identity in conjunction with a dedicated database for user authentication and authorization.&lt;br&gt;
· &lt;em&gt;Backend Services:&lt;/em&gt;&lt;br&gt;
For the Backend I will use a Web API in .NET 8 to communicate with the Frontend and Entity Framework Core as an ORM to access the data. The main database I will use will be MSSQL for easy data storage and retrieval&lt;br&gt;
·&lt;em&gt;Key Components:&lt;/em&gt; &lt;br&gt;
Redis will be used to cache data that does not change frequently and has increased demand from users, improving application performance and mitigating database load and latency. Elasticsearch will be used to store log files but will also serve the search function of users, it will also be complemented by Kibana for the visualization and analysis of log files. Real-time user interface updates will be possible by leveraging SignalR. Finally RabbitMQ will act as a message broker for asynchronous communication between core services, such as the Email Worker for sending emails asynchronously and the Hangfire Worker for performing various tasks in the background.&lt;br&gt;
· &lt;em&gt;Deployment Infrastructure:&lt;/em&gt;&lt;br&gt;
The deployment infrastructure will be hosted on Azure, using Docker containers to package all the individual parts of the application.</value>
  </data>
  <data name="ServiceBookingDesign" xml:space="preserve">
    <value>Service Booking System Design</value>
  </data>
  <data name="ServiceBookingTitle" xml:space="preserve">
    <value>&lt;u&gt;Local Service Booking Web App&lt;/u&gt;</value>
  </data>
  <data name="SignalRDesc" xml:space="preserve">
    <value>In a previous role, I leveraged SignalR to facilitate real-time updates within the frontend, implementing it in both C# and JavaScript.</value>
  </data>
  <data name="SkillAcquired" xml:space="preserve">
    <value>Was acquired through:</value>
  </data>
  <data name="SkillAcquired_Job" xml:space="preserve">
    <value>Job</value>
  </data>
  <data name="SkillAcquired_JobCourse" xml:space="preserve">
    <value>Job, Courses</value>
  </data>
  <data name="SkillAcquired_JobProject" xml:space="preserve">
    <value>Job, Projects</value>
  </data>
  <data name="SkillAcquired_JobProjectCourse" xml:space="preserve">
    <value>Job, Projects, Courses</value>
  </data>
  <data name="SkillAcquired_Project" xml:space="preserve">
    <value>Projects</value>
  </data>
  <data name="Skills" xml:space="preserve">
    <value>Skills</value>
  </data>
  <data name="SkillsTitle" xml:space="preserve">
    <value>&lt;b&gt;Skills/Tools acquired&lt;/b&gt;</value>
  </data>
  <data name="SoftwareEngineer" xml:space="preserve">
    <value>&lt;b&gt;Software Engineer&lt;/b&gt;</value>
  </data>
  <data name="SoftwareEngineerIntern" xml:space="preserve">
    <value>&lt;b&gt;Software Engineer Intern &lt;/b&gt;</value>
  </data>
  <data name="SQLDesc" xml:space="preserve">
    <value>In almost every project I've taken on, I've used SQL by integrating it with various ORMs like EFCore and Sequelize. Additionally, I have used raw SQL queries extensively.</value>
  </data>
  <data name="SystemDesign" xml:space="preserve">
    <value>System Design</value>
  </data>
  <data name="TerracomDate" xml:space="preserve">
    <value>Oct 2020 - Dec 2022</value>
  </data>
  <data name="TerracomDesc" xml:space="preserve">
    <value>• Played a key role in developing and maintaining the QR-Patrol security management platform.&lt;br/&gt;
• Actively contributed to technical analysis and system design, driving enhancements to project outcomes.&lt;br/&gt;
• Collaborated closely with team members in regular meetings to align efforts, implement updates, and continuously improve the platform.</value>
  </data>
  <data name="UnderConstruction" xml:space="preserve">
    <value>&lt;b&gt;  Under Construction &lt;/b&gt;</value>
  </data>
  <data name="PwCDesc" xml:space="preserve">
  <value>&lt;b&gt;🖥️ Web Development &amp; UI:&lt;/b&gt;&lt;br/&gt;
 • Developed web applications using .NET 8, Blazor Server, and ASP.NET MVC.&lt;br/&gt;
 • Built modern, responsive UIs with MudBlazor and JavaScript.&lt;br/&gt;

&lt;b&gt;🛠️ Backend &amp; Data Operations:&lt;/b&gt;&lt;br/&gt;
 • Worked with SQL Server databases using Stored Procedures and raw SQL for complex queries.&lt;br/&gt;
 • Managed data access with Entity Framework Core.&lt;br/&gt;

&lt;b&gt;⏱️ Background Processing &amp; Automation:&lt;/b&gt;&lt;br/&gt;
 • Integrated Hangfire for task scheduling and email notifications.&lt;br/&gt;

&lt;b&gt;🚀 DevOps &amp; Project Management:&lt;/b&gt;&lt;br/&gt;
 • Managed the full development lifecycle in Azure DevOps, including CI/CD pipelines and project tracking.</value>
  </data>
</root>