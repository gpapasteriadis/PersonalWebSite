@using System.Globalization
@using PersonalWebSite.Components
@inherits LayoutComponentBase
@inject ILocalStorageService localStorage
@inject IJSRuntime JS
@inject ISnackbar SnackbarService
@inject NavigationManager Navigation

<MudThemeProvider Theme="MyCustomTheme" IsDarkMode=@_isDarkMode/>
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Class="flex-wrap" DisableGutters=false id="appbar" Elevation="3" Dense="true">
        <AppBarItems></AppBarItems>
        <ThemeSelector darkModeChanged="@darkModeChanged" />
    </MudAppBar>

    <MudMainContent Style="overflow:hidden">
        @Body
    </MudMainContent>

    <MudScrollToTop OnClick=navto Style ="margin:20px; z-index:2001;">
        <MudFab Size="Size.Medium" Style="color:burlywood" IconSize="Size.Large" StartIcon="@Icons.Material.Filled.KeyboardArrowUp" />
    </MudScrollToTop>
</MudLayout>

@code {
    private bool _isDarkMode;

    MudTheme MyCustomTheme = new MudTheme()
    {
        Palette = new PaletteLight()
        {
            ActionDefault = Colors.Teal.Darken4,
            Primary = Colors.Teal.Darken4,
            Secondary = Colors.Teal.Default,
            AppbarBackground = Colors.Teal.Lighten1,
            Background = Colors.Teal.Lighten5,
            Divider = Colors.Teal.Darken2,
            Surface = Colors.Teal.Lighten5

        },
        PaletteDark = new PaletteDark()
        {
            ActionDefault = Colors.BlueGrey.Darken4,
            Primary = Colors.BlueGrey.Lighten5,
            Secondary = Colors.Grey.Default,
            AppbarBackground = Colors.BlueGrey.Darken4,
            Background = Colors.BlueGrey.Darken3,
            Divider = Colors.BlueGrey.Lighten2,
            Surface = Colors.BlueGrey.Darken3
        },

        // Typography = new Typography()
        // {
        //     Default = new Default()
        //     {
        //         FontFamily = new[] { "sans-serif" },
        //         FontSize = "3vmax",
        //         FontWeight = 500,
        //         LineHeight = 1.6,
        //         LetterSpacing = ".0075em"
        //     },
        //     Body1 = new Body1()
        //     {
        //         FontFamily = new[] { "sans-serif" },
        //         FontSize = "2.5vmax",
        //         FontWeight = 500,
        //         LineHeight = 1.6,
        //         LetterSpacing = ".0075em"
        //     },
        //     Body2 = new Body2()
        //     {
        //         FontFamily = new[] { "sans-serif" },
        //         FontSize = "2vmax",
        //         FontWeight = 400,
        //         LineHeight = 1.6,
        //         LetterSpacing = ".0075em"
        //     },
        //     H4 = new H4()
        //     {
        //         FontFamily = new[] { "sans-serif" },
        //         FontSize = "3vmax",
        //         FontWeight = 400,
        //         LineHeight = 1.6,
        //         LetterSpacing = ".0075em"
        //     },
        //     H5 = new H5()
        //     {
        //         FontFamily = new[] { "sans-serif" },
        //         FontSize = "2.5vmax",
        //         FontWeight = 400,
        //         LineHeight = 1.6,
        //         LetterSpacing = ".0075em"
        //     }

        // },
    };

    protected override async Task OnInitializedAsync()
    {
        await JS.InvokeVoidAsync("scrollFunctionality");
    }

    private void darkModeChanged(bool isDarkMode)
    {
        _isDarkMode = isDarkMode;
    }

    private void navto()
    {
        Navigation.NavigateTo("/", forceLoad: false);
    }

}