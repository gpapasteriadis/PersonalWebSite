@using System.Globalization
@using PersonalWebSite.Components
@inject NavigationManager NavManager
@inherits LayoutComponentBase
@inject ILocalStorageService localStorage

<MudThemeProvider Theme="MyCustomTheme" IsDarkMode=@_isDarkMode/>
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Style="align-items:flex-end" Elevation="3" Dense="true">
        <CultureSelector />
        <MudTooltip Text=@_changeThemeString>
            <MudIconButton Edge="Edge.End" Icon=@_darkLightIcon Style="color:burlywood" OnClick="() => changeThemeMode(false)" />
        </MudTooltip>
    </MudAppBar>
    <MudMainContent Style="overflow:hidden">
        @Body
    </MudMainContent>

    <MudScrollToTop Style="margin:20px; z-index:2001;">
        <MudFab Size="Size.Medium" Style="color:burlywood" IconSize="Size.Large" StartIcon="@Icons.Material.Filled.KeyboardArrowUp" />
    </MudScrollToTop>
</MudLayout>

@*Keyframes by https://animate.style/*@

@code {

    private bool _isDarkMode = true;
    private string? _darkLightIcon;
    private string? _changeThemeString;
    private string? _localStorageTheme { get; set; }

    MudTheme MyCustomTheme = new MudTheme()
    {
        Palette = new PaletteLight()
        {
            ActionDefault = Colors.Teal.Darken4,
            Primary = Colors.Teal.Lighten2,
            Secondary = Colors.Teal.Default,
            AppbarBackground = Colors.Teal.Lighten1,
            Background = Colors.Teal.Lighten5,
            Divider = Colors.Teal.Darken2

        },
        PaletteDark = new PaletteDark()
        {
            ActionDefault = Colors.BlueGrey.Darken4,
            Primary = Colors.BlueGrey.Default,
            Secondary = Colors.Grey.Default,
            AppbarBackground = Colors.BlueGrey.Darken4,
            Background = Colors.BlueGrey.Darken3,
            Divider = Colors.BlueGrey.Darken4
        },

        Typography = new Typography()
        {
            Default = new Default()
            {
                FontFamily = new[] { "consolas", "Helvetica", "Arial", "sans-serif" },
                FontSize = "1.25rem",
                FontWeight = 500,
                LineHeight = 1.6,
                LetterSpacing = ".0075em"
            }
        },

        LayoutProperties = new LayoutProperties()
        {
            DrawerWidthRight = "650px"
        }
    };

    protected override async Task OnInitializedAsync()
    {
        _isDarkMode = await localStorage.GetItemAsync<bool>("IsDarkMode");
        setThemeMode();
    }


    private async void changeThemeMode(bool firstRender)
    {
        _isDarkMode = !_isDarkMode;
        setThemeMode();
        await localStorage.SetItemAsync("IsDarkMode", _isDarkMode);
    }

    private void setThemeMode()
    {
        _darkLightIcon = _isDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.Nightlight;
        _changeThemeString = _isDarkMode ? "Switch to Light Theme" : "Switch to Dark Theme";
        _localStorageTheme = _isDarkMode ? "Light" : "Dark";
    }

}